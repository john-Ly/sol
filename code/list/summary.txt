A list is an ordered sequence of values.  
The most important part about list structures is that the data has an ordering (which is not the same as being sorted). 
Lists typically have the following operations:
- initialize
- add an item to the list
- remove an item from the list
- search
- sort
- iterate through all items
- and more...
==========================================================================================
array
linked list
  list class
  iterator class
  const_iterator class
  node class
 To avoid naming conflict, iterators can be nested within the list class.

application
- josues *
 
==========================================================================================
 A stack is a list with the restriction that insertions and deletions can be performed in only
one position, namely, the end of the list, called the top.

operation
push - add a new item to the stack
pop - removes top item from the stack
initialize - create an empty stack
isEmpty - tests for whether or not stack is empty
isFull - tests to see if stack is full and cannot grow (not always needed)
top - looks at value of the top item but do not remove it

implementation of stack:
- array
- linked list (should insert & delete at the begining)

application
- function calls/ recursion  *
- undo in an editor
- balanced parentheses       *
- infix postfix prefix       *

==========================================================================================
Queue lists insertion is done at one end whereas, deletion is performed at the other end

Note: when we refer to the front and back of queue, it is not necessarily talking
      about the front and back of the data structure used to implement the queue. 
	  The front should be thought of as where the oldest item in the queue is and 
	  the back is where the newest item is. Most important is to maintain the FIFO 
	  structure.
	  
Queue Operations	  
enqueue - adds an item to the end of the queue
dequeue - remove an item from front of the queue
initialize - create an empty queue
isEmpty - tests for whether or not queue is empty
isFull - tests to see if queue is full (not needed if data structure grows automatically)
front - looks at value of the first item but do not remove it

That is the item to be removed is the oldest item in the list.
as long as this is true, it doesn't matter where exactly the items get put into the queue or where it is removed.

Applications:
1. printer queue
2. process schedualing
3. simulating wait