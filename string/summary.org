* Intro
  1. 子串 和 子序列
     连续      不连续
  2. 前缀 树
  3. 后缀 数组
  5. 回文
  6. 字典序
  7. 匹配 kmp
     
  string api
  常用stringstream  istring
  增删改查/ 排序 替换/ 旋转
     
* 题型
** 判断规则
*** 符合整数
*** 符合浮点数
*** 符合回文
** 数字运算 大正数
** 数组相关 快排划分 左移右移
** 字符计数
 哈希表 (字符ASCII)
 滑动窗口
 查找无重复子串问题
 计算变位词
** 动态规划
 最长公共子串/ 子序列
 最长回文子串/ 子序列
** 搜索
  从一个字符串转换为另一个字符串
** 高级算法
  kmp 字符串匹配
  manacher 最长回文子串
  前缀树 后缀数组
* 题目
** 两棵树 判断另一个是否为其子树 返回bool
   时间复杂度为O(M+N)
   二叉树序列化 str1  str2
   KMP判断str1是否包含str2
** str1 str2 变形词
   字符种类和出现的个数都相同
   + 利用hash表 字符次数统计
** 判断是否为旋转词
  1234 -> 1234/ 4123/ 3412/ 2341
  最优解O(2N)
  + 判断两个字符串的长度是否相等
  + 相等构造 str1+str1的大字符串
  + 利用KMP算法判断大字符串是否含有str2
** 字符串 单词逆序 151
  反转字符串
  然后局部反转
** 字符串rotate指定位置
  rotate操作  数组的左移右移
  space O(1)  Time O(n)

  使用局部逆序函数 组合
** 拼接字符串 保证字典序最小的返回
   @TODO leetcode 做过
   abc, de => abcde  deabc => 返回abcde
   按照str1+str2 < str2+str1 则str1放在前面
   否则 str2放在前
   排序规则 lambda
** 空格替换成%20(空间足够)
  + 计算空格的个数 计算需要的空间
  + 从后向前拷贝和填充02%
    i 指向原字符串的结尾
    j 指向计算后的结尾
** 判断括号是否有效banlance
   可以使用num=0
   遇到左括号为++ , 右括号--, 如果num<0 说明右括号非法 直接返回false
   遍历结束 num==0 true
** str中最长无重复子串的长度
   @leetcode 3